// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc253.Code2017.commands;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc253.Code2017.Robot;

public class GearAutoCorrect extends Command {
	
	//Sensor declarations
	private Ultrasonic ultraLeft;
	private Ultrasonic ultraRight;
	private DigitalInput photo;
	//These are referenced in GearAutoCorrect()
	
    public GearAutoCorrect() {
    	
    	//Subsystem requirements
    	requires(Robot.drivetraintank);
    	requires(Robot.sensorData);
    	
    	//Creates instance of sensor objects
		photo = Robot.sensorData.photo;
		ultraLeft = Robot.sensorData.ultraLeft;
		ultraRight = Robot.sensorData.ultraRight;
		
		ultraLeft.setAutomaticMode(true);
		ultraRight.setAutomaticMode(true);
    }	
    
    protected void initialize() {
    }

    protected void execute() {
    	double rangeLeft; 
    	double rangeRight;
    	rangeLeft = ultraLeft.getRangeInches();
    	rangeRight = ultraRight.getRangeInches();
    	boolean isGearAligned;
    	isGearAligned = photo.get();
    	boolean isRobotAligned = false;
    	SmartDashboard.putBoolean("Is the robot aligned?", isRobotAligned);
    	
    	if(isGearAligned == false){
    		if(Math.abs(rangeLeft - rangeRight) < 2.0){
    			isRobotAligned = true;
    			SmartDashboard.putBoolean("Is the robot aligned?", isRobotAligned);
    			end();
    		} else {
    			isRobotAligned = false;
    			SmartDashboard.putBoolean("Is the robot aligned?", isRobotAligned);
    			if(rangeLeft > rangeRight){
    				Robot.drivetraintank.setLeft_Back(-.25);
    		    	Robot.drivetraintank.setLeft(-.25);
    		    	Robot.drivetraintank.setRight(.25);
    		    	Robot.drivetraintank.setRight_Back(.25);
    			} else {
    				Robot.drivetraintank.setLeft_Back(.25);
    		    	Robot.drivetraintank.setLeft(.25);
    		    	Robot.drivetraintank.setRight(-.25);
    		    	Robot.drivetraintank.setRight_Back(-.25);
    			}
    		}
    	} else {
    		if(Math.abs(rangeLeft - rangeRight) < 5.0 && Math.abs(rangeLeft - rangeRight) > 4.0){
    			isRobotAligned = true;
    			SmartDashboard.putBoolean("Is the robot aligned?", isRobotAligned);
    			end();
    		} else {
    			isRobotAligned = false;
    			SmartDashboard.putBoolean("Is the robot aligned?", isRobotAligned);
    			if(rangeLeft > rangeRight){
    				if(Math.abs(rangeLeft - rangeRight) > 5.0){
    					Robot.drivetraintank.setLeft_Back(-.25);
    			    	Robot.drivetraintank.setLeft(-.25);
    			    	Robot.drivetraintank.setRight(.25);
    			    	Robot.drivetraintank.setRight_Back(.25);
    				} else {
    					Robot.drivetraintank.setLeft_Back(.25);
    			    	Robot.drivetraintank.setLeft(.25);
    			    	Robot.drivetraintank.setRight(-.25);
    			    	Robot.drivetraintank.setRight_Back(-.25);
    				}
    			} else {
    				if(Math.abs(rangeLeft - rangeRight) > 5.0){
    					Robot.drivetraintank.setLeft_Back(.25);
    			    	Robot.drivetraintank.setLeft(.25);
    			    	Robot.drivetraintank.setRight(-.25);
    			    	Robot.drivetraintank.setRight_Back(-.25);
    				} else {
    					Robot.drivetraintank.setLeft_Back(-.25);
    			    	Robot.drivetraintank.setLeft(-.25);
    			    	Robot.drivetraintank.setRight(.25);
    			    	Robot.drivetraintank.setRight_Back(.25);
    				}
    			}
    		}
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.drivetraintank.setLeft_Back(0);
    	Robot.drivetraintank.setLeft(0);
    	Robot.drivetraintank.setRight(0);
    	Robot.drivetraintank.setRight_Back(0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted(){
    	Robot.drivetraintank.setLeft_Back(0);
    	Robot.drivetraintank.setLeft(0);
    	Robot.drivetraintank.setRight(0);
    	Robot.drivetraintank.setRight_Back(0);
    }
}
